{"version":3,"sources":["base.js","Home.js","Auth.js","Login.js","SignUp.js","PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Home","className","class","onClick","auth","signOut","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","useEffect","onAuthStateChanged","Provider","value","withRouter","history","handleLogin","useCallback","event","a","preventDefault","target","elements","email","password","signInWithEmailAndPassword","push","alert","useContext","to","href","onSubmit","style","marginLeft","type","name","aria-describedby","placeholder","paddingTop","handleSignUp","createUserWithEmailAndPassword","rel","PrivateRoute","RouteComponent","component","rest","render","routeProps","App","exact","path","Login","SignUp","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0eb6a6f.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID\r\n});\r\n\r\nexport default app;\r\n","import React from \"react\";\r\nimport app from \"./base\";\r\n\r\n\r\n\r\nconst Home = () => {\r\n  return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"form-wrapper\">\r\n            <div class=\"row login\">\r\n            \r\n                    <div className=\"col page\">\r\n            <h2 class=\"text-center\">Witaj w panelu klienta</h2>\r\n                <p>Znajdziesz tutaj wszystkie informacje o Twoim własnym profilu</p></div>\r\n                <div className=\"col-md-4\" class=\"signout\">\r\n      <button onClick={() => app.auth().signOut()} className=\"btn\">Wyloguj się</button></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport app from \"./base.js\";\r\n\r\nexport const AuthContext = React.createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    app.auth().onAuthStateChanged(setCurrentUser);\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n","import React, { useCallback, useContext } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport app from \"./base.js\";\r\nimport { AuthContext } from \"./Auth.js\";\r\n\r\nconst Login = ({ history }) => {\r\n  const handleLogin = useCallback(\r\n    async event => {\r\n      event.preventDefault();\r\n      const { email, password } = event.target.elements;\r\n      try {\r\n        await app\r\n          .auth()\r\n          .signInWithEmailAndPassword(email.value, password.value);\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    },\r\n    [history]\r\n  );\r\n\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  if (currentUser) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n<div className=\"wrapper\">\r\n        <div className=\"form-wrapper\">\r\n          <h1>Zaloguj się</h1>\r\n          <h3>wykorzystaj swój potencjał w naszej bezpłatnej aplikacji</h3>\r\n         <p class=\"small-text\"><a href=\"/signup\">Nie masz jeszcze konta? Zarejestruj się!</a></p>\r\n    <form onSubmit={handleLogin}>\r\n    <div class=\"form-group\">\r\n    <div class=\"text-left\" style={{marginLeft: '20px'}}><label>Adres email</label></div>\r\n            <input type=\"email\" name=\"email\" class=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"Adres email\" />\r\n       </div>\r\n       <div class=\"form-group\">\r\n       <div class=\"text-left\" style={{marginLeft: '20px'}}><label>Hasło</label></div>\r\n      <input type=\"password\" name=\"password\" class=\"form-control\" placeholder=\"Hasło\" />\r\n        </div>\r\n\r\n      <div class=\"login\">\r\n        <div class=\"col-6 signin\">\r\n            <button type=\"submit\" style={{marginLeft: '140px'}} className=\"btn\">Zaloguj się</button>\r\n        </div>\r\n        <p class=\"small-text\" style={{paddingTop: '20px'}}><a href=\"/signup\">Zapomniałeś login lub hasla?</a></p>\r\n    </div>\r\n    </form>   \r\n        </div>\r\n </div>              \r\n  );\r\n};\r\n\r\nexport default withRouter(Login);\r\n","import React, { useCallback } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport app from \"./base\";\r\n\r\nconst SignUp = ({ history }) => {\r\n  const handleSignUp = useCallback(async event => {\r\n    event.preventDefault();\r\n    const { email, password } = event.target.elements;\r\n    try {\r\n      await app\r\n        .auth()\r\n        .createUserWithEmailAndPassword(email.value, password.value);\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  }, [history]);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n        <div className=\"form-wrapper\">\r\n          <h1>Zarejestruj się</h1>\r\n          <h3>bezpłatny dostęp do naszej aplikacji</h3>\r\n          <p class=\"small-text\"><a href=\"/login\">Masz już konto? Zaloguj się!</a></p>\r\n    <form onSubmit={handleSignUp}>\r\n    <div class=\"form-group\">\r\n        <div class=\"text-left\" style={{marginLeft: '20px'}}><label>Adres email</label></div>\r\n            <input type=\"email\" name=\"email\" class=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"Adres email\" />\r\n       </div>\r\n       <div class=\"form-group\">\r\n       <div class=\"text-left\" style={{marginLeft: '20px'}}><label>Hasło</label></div>\r\n      <input type=\"password\" name=\"password\" class=\"form-control\" placeholder=\"Hasło\" />\r\n        </div>\r\n        \r\n      <div class=\"row login\">\r\n        <div class=\"col-6 signin\">\r\n        <div class=\"form-check\" style={{marginLeft: '5px'}}>\r\n    <input type=\"checkbox\" class=\"form-check-input\" />\r\n    <label class=\"form-check-label\"><a href=\"https://urk.edu.pl/zasoby/1/ZGODA_NA_PRZETWARZANIE_DANYCH_OSOBOWYCH.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Wyrażam zgodę na przetwarzanie moich danych osobowych</a></label>\r\n  </div>\r\n            <button type=\"submit\" style={{marginLeft: '140px'}} className=\"btn\">Zarejestruj się</button>\r\n            </div>\r\n    </div>\r\n    <p class=\"small-text\" style={{paddingTop: '20px'}}><a href=\"/signup\">Zapisz się do newslettera, zyskaj 10% zniżki</a></p>\r\n    </form>   \r\n        </div>\r\n </div>              \r\n  );\r\n};\r\n\r\nexport default withRouter(SignUp);\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"./Auth\";\r\n\r\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\r\n  const {currentUser} = useContext(AuthContext);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={routeProps =>\r\n        !!currentUser ? (\r\n          <RouteComponent {...routeProps} />\r\n        ) : (\r\n          <Redirect to={\"/login\"} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\n\r\nexport default PrivateRoute;","import React from \"react\";\nimport \"./App.css\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport SignUp from \"./SignUp\";\nimport { AuthProvider } from \"./Auth\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst App = () => {\n  return (\n    <AuthProvider>\n      <Router>\n        <div>\n          <PrivateRoute exact path=\"/\" component={Home} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/signup\" component={SignUp} />\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}